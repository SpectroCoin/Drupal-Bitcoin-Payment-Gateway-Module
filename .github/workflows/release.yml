name: Create tag and release

on:
  workflow_run:
    workflows: ["Launch release.yml after closed PR"]
    types:
      - completed
  workflow_dispatch:

jobs:
  create_tag_and_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Install GitHub CLI
        run: sudo apt-get install gh

      - name: Fetch Latest PR Info and Check for Existing Tag
        id: check_tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_TITLE=$(gh pr list --state merged --limit 1 --json title --jq '.[0].title')
          PR_BODY=$(gh pr list --state merged --limit 1 --json body --jq '.[0].body')
          TAG_NAME=$(echo "$PR_TITLE" | sed 's/ /_/g')

          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag '$TAG_NAME' already exists. Exiting workflow."
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
            exit 0
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
            echo "TAG_NAME: $TAG_NAME"
            echo "PR_BODY: $PR_BODY"

            git tag "$TAG_NAME"
            git push origin "$TAG_NAME"
            echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          fi

      - name: Create Release
        if: env.TAG_EXISTS == 'false'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: "${{ env.TAG_NAME }}"
          body: "Automated release created by GitHub Actions."
          draft: false
          prerelease: false

      - name: Prepare module directory and create zip file
        if: env.TAG_EXISTS == 'false'
        run: |
          MODULE_NAME="commerce_spectrocoin"
          TAG_NAME=${{ env.TAG_NAME }}

          mkdir -p build/$MODULE_NAME
          rsync -av --exclude='build' --exclude='.git*' --exclude='.github*' --exclude='.vscode*' --exclude='*.md' --exclude='.gitignore' ./ build/$MODULE_NAME
          cd build
          ZIP_FILE_NAME="${GITHUB_WORKSPACE}/${MODULE_NAME}_${TAG_NAME}.zip"
          zip -r "$ZIP_FILE_NAME" "$MODULE_NAME"

          echo "ZIP_FILE_NAME=$ZIP_FILE_NAME" >> $GITHUB_ENV
          echo "MODULE_NAME=$MODULE_NAME" >> $GITHUB_ENV

      - name: Upload release asset
        if: env.TAG_EXISTS == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ZIP_FILE_NAME }}
          asset_name: "${{ env.MODULE_NAME }}_${{ env.TAG_NAME }}.zip"
          asset_content_type: application/zip

      - name: Upload asset to tag
        if: env.TAG_EXISTS == 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME=${{ env.TAG_NAME }}
          ZIP_FILE_NAME=${{ env.ZIP_FILE_NAME }}
          MODULE_NAME=${{ env.MODULE_NAME }}

          # Find the release ID for the tag
          RELEASE_ID=$(gh api repos/:owner/:repo/releases --jq '.[] | select(.tag_name=="'"$TAG_NAME"'") | .id')

          if [ -z "$RELEASE_ID" ]; then
            echo "Error: Unable to find release for tag $TAG_NAME."
            exit 1
          fi

          # Correctly format the upload URL
          UPLOAD_URL="https://uploads.github.com/repos/:owner/:repo/releases/$RELEASE_ID/assets"

          # Use curl to upload the asset
          curl -X POST \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Content-Type: application/zip" \
            --data-binary "@$ZIP_FILE_NAME" \
            "$UPLOAD_URL?name=${MODULE_NAME}_${TAG_NAME}.zip"
